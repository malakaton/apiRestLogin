<?php

namespace ApiBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoder;
use Libs\CustomExceptions;

/**
 * UsersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UsersRepository extends EntityRepository
{
    const _RESPONSE_CODE_OK = 200;
    const _RESPONSE_CODE_USER_EMPTY = 401;
    const _RESPONSE_CODE_PASSWORD_EMPTY = 402;
    const _RESPONSE_CODE_USERNAME_NOT_EXIST = 403;
    const _RESPONSE_CODE_CREDENTIALS_KO = 404;

    private $userList = array(
        array(
            "name" => "johnsnow@gmail.com",
            "password" => "yT3u6",
        ),
        array(
            "name" => "davidgoliat@gmail.com",
            "password" => "iO7f47nK"
        ),
        array(
            "name" => "praisethesun@darksouls.com",
            "password" => "6Yu0pJ43"
        ),
        array(
            "name" => "juansolo@hotmail.com",
            "password" => "ui5345Po"
        ),
        array(
            "name" => "dark_knight@yahoo.com",
            "password" => "Pdf34dvD"
        ),
        array(
            "name" => "gitgud@gmail.com",
            "password" => "10RdTb98"
        )
    );

    /**
     *
     * Only used to save users in database, will save his name and password (encrypted)
     * @param UserPasswordEncoder $encoder
     *
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function saveUsers(UserPasswordEncoder $encoder) {
        $em = $this->getEntityManager();

        foreach ($this->userList as $user) {
            $users = new Users();

            $users->setName($user['name']);
            $users->setPassword($this->encryptPassword($encoder, $users, $user['password']));
            $em->persist($users);
            $em->flush();
        }
    }

    /**
     * check if the username and password are ok, for example, the username exist in database, the password
     * is the correct for this user, the password is not empty. If the data of user is ok will be return
     * an array with his iduser and jwt token, if not will be return an exception with his error code and error
     * message
     *
     * @param UserPasswordEncoder $encoder
     * @param                     $user
     *
     * @return array
     */
    public function checkCredentials(UserPasswordEncoder $encoder, $user) {
        try {
            if (is_null($user->name)) {
                throw new CustomExceptions("User name is empty", self::_RESPONSE_CODE_USER_EMPTY);
            }
            if (is_null($user->password)) {
                throw new CustomExceptions("User password is empty", self::_RESPONSE_CODE_PASSWORD_EMPTY);
            }
            $users = new Users();
            $users->setName($user->name);
            $users->setPassword($this->encryptPassword($encoder, $users, $user->password));
            if ($idUser = $this->getIdUser($users)) {
                return array('idUser' => $idUser, 'userName' => $users->getName());
            } else {
                if (!$this->findBy(array('name' => $users->getName()))) {
                    throw new CustomExceptions(
                        "User name: {$user->name} doesnt exist",
                        self::_RESPONSE_CODE_USERNAME_NOT_EXIST
                    );
                } else {
                    throw new CustomExceptions(
                        "Combination of name: {$user->name} and password: {$user->password} are not ok",
                        self::_RESPONSE_CODE_CREDENTIALS_KO
                    );
                }
            }

        } catch (CustomExceptions $ex) {
            return array(
                'message' => $ex->getMessage(),
                'errorCode' => $ex->getCode()
            );
        }
    }

    /**
     * Return the user data findby username and password
     *
     * @param Users $users
     *
     * @return bool
     */
    public function getIdUser(Users $users) {
        $user = $this->findBy(
            array(
                'name' => $users->getName(),
                'password' => $users->getPassword()
            )
        );
        $user = array_shift($user);

        if (!empty($user)) {
            return $user->getId();
        }

        return false;
    }

    /**
     * Delete all users of table users in database
     *
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function deleteAllUsers() {
        $users = $this->findAll();
        $em = $this->getEntityManager();

        foreach ($users as $user) {
            $em->remove($user);
        }
        $em->flush();
    }

    /**
     * Encrypt the password of user
     *
     * @param UserPasswordEncoder $encoder
     * @param Users               $users
     * @param                     $password
     *
     * @return string
     */
    private function encryptPassword(UserPasswordEncoder $encoder, Users $users, $password) {
        return $encoder->encodePassword($users, $password);
    }
}
